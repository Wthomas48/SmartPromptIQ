import React, { useState, useEffect, createContext, useContext } from "react";
import { useLocation } from "wouter";

interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
}

interface AuthContextType {
  isAuthenticated: boolean;
  isLoading: boolean;
  user: User | null;
  login: () => void;
  logout: () => void;
  checkAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [, setLocation] = useLocation();

  const checkAuth = async () => {
    try {
      setIsLoading(true);
      console.log("Checking auth...");
      
      // Check for auth token in localStorage
      const token = localStorage.getItem("authToken");
      console.log("Found token:", token);
      
      if (token) {
        // Simulate user data for demo
        const userData = {
          id: "1",
          email: "user@smartpromptiq.com",
          name: "Demo User"
        };
        console.log("Setting user:", userData);
        setUser(userData);
        setIsAuthenticated(true);
        console.log("User authenticated");
      } else {
        console.log("No token found, user not authenticated");
        setIsAuthenticated(false);
        setUser(null);
      }
    } catch (error) {
      console.error("Auth check failed:", error);
      setIsAuthenticated(false);
      setUser(null);
    } finally {
      setIsLoading(false);
      console.log("Auth check complete");
    }
  };

  // Check for auth token on mount
  useEffect(() => {
    checkAuth();
  }, []);

  const login = () => {
    console.log("Login function called!");
    try {
      // Client-side demo login - no backend needed
      const fakeToken = "demo-token-" + Date.now();
      console.log("Setting token:", fakeToken);
      localStorage.setItem("authToken", fakeToken);
      
      const userData = {
        id: "1",
        email: "user@smartpromptiq.com",
        name: "Demo User"
      };
      console.log("Setting user after login:", userData);
      setUser(userData);
      setIsAuthenticated(true);
      
      console.log("Redirecting to dashboard...");
      // Use wouter's navigation instead of window.location
      setLocation("/dashboard");
      console.log("Login complete!");
    } catch (error) {
      console.error("Login failed:", error);
    }
  };

  const logout = async () => {
    console.log("Logout function called!");
    try {
      // Clear local state
      localStorage.removeItem("authToken");
      setIsAuthenticated(false);
      setUser(null);
      
      console.log("Redirecting to home...");
      // Use wouter's navigation instead of window.location
      setLocation("/");
      console.log("Logout complete!");
    } catch (error) {
      console.error("Logout failed:", error);
    }
  };

  return (
    <AuthContext.Provider value={{ 
      isAuthenticated, 
      isLoading, 
      user, 
      login, 
      logout, 
      checkAuth 
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within AuthProvider");
  }
  return context;
};
