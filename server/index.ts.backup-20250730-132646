import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { ensureDatabaseSetup, closeDatabaseConnection } from './db';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

app.get('/api/test', (req, res) => {
  res.json({ message: 'Backend is connected!' });
});

// *** NEW SUGGESTIONS ENDPOINTS ***
app.get('/api/suggestions/personalized', (req, res) => {
  try {
    const { category } = req.query;
    
    const suggestions = [
      {
        id: '1',
        title: 'Marketing Campaign Planner',
        description: 'Generate comprehensive marketing campaign strategies',
        category: category || 'marketing',
        prompt: 'Create a detailed marketing campaign for...',
        tags: ['marketing', 'strategy', 'campaign'],
        relevanceScore: 0.95,
        estimatedTokens: 150
      },
      {
        id: '2', 
        title: 'Content Creation Assistant',
        description: 'Help create engaging content for your audience',
        category: category || 'content',
        prompt: 'Write engaging content that...',
        tags: ['content', 'writing', 'engagement'],
        relevanceScore: 0.88,
        estimatedTokens: 120
      },
      {
        id: '3',
        title: 'Business Strategy Guide',
        description: 'Develop effective business strategies for ' + (category || 'any industry'),
        category: category || 'business',
        prompt: 'Create a business strategy for...',
        tags: ['business', 'strategy', 'planning'],
        relevanceScore: 0.92,
        estimatedTokens: 180
      }
    ];

    console.log(`📡 Suggestions requested for category: ${category}`);
    res.json({ suggestions });
  } catch (error) {
    console.error('Error getting suggestions:', error);
    res.status(500).json({ error: 'Failed to get suggestions' });
  }
});

app.get('/api/suggestions/trending', (req, res) => {
  try {
    const suggestions = [
      {
        id: '4',
        title: 'AI Prompt Engineering',
        description: 'Master the art of AI prompt engineering',
        category: 'technical',
        prompt: 'Create effective AI prompts for...',
        tags: ['AI', 'prompt', 'engineering'],
        relevanceScore: 0.97,
        estimatedTokens: 200
      }
    ];

    console.log('📈 Trending suggestions requested');
    res.json({ suggestions });
  } catch (error) {
    res.status(500).json({ error: 'Failed to get trending suggestions' });
  }
});

app.post('/api/suggestions/interaction', (req, res) => {
  try {
    const { suggestionId, action } = req.body;
    console.log(`👤 User ${action} suggestion ${suggestionId}`);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: 'Failed to record interaction' });
  }
});

// *** EDUCATION ENDPOINTS ***
app.post('/api/education/course-creation', (req, res) => {
  try {
    const data = req.body;
    console.log('📚 Course creation request:', data);
    const result = {
      id: Date.now().toString(),
      type: 'course_creation',
      title: `Course: ${data.courseName || 'Educational Course'}`,
      description: `Comprehensive course design for ${data.subject || 'learning'}`,
      subject: data.subject || 'General',
      targetAudience: data.targetAudience || 'Students',
      modules: [
        'Introduction and Fundamentals',
        'Core Concepts and Theory',
        'Practical Applications',
        'Advanced Topics',
        'Final Project and Assessment'
      ],
      objectives: data.learningObjectives ? data.learningObjectives : [
        'Understand key concepts',
        'Apply practical skills',
        'Analyze real-world scenarios'
      ],
      activities: [
        'Interactive lectures and discussions',
        'Hands-on exercises and labs',
        'Group projects and collaboration',
        'Case study analysis'
      ],
      assessments: data.assessmentMethods ? data.assessmentMethods : [
        'Quizzes and tests',
        'Project deliverables',
        'Peer evaluations'
      ],
      resources: [
        'Course textbook and readings',
        'Online resources and tutorials',
        'Software tools and platforms',
        'Community forums and support'
      ],
      timeline: data.duration || '8 weeks',
      difficulty: 'Intermediate',
      recommendations: [
        'Schedule regular study sessions',
        'Engage with peer discussions',
        'Practice concepts through exercises',
        'Seek help when needed'
      ],
      generatedAt: new Date().toISOString()
    };
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Failed to generate course' });
  }
});

app.post('/api/education/skill-development', (req, res) => {
  try {
    const data = req.body;
    console.log('🎯 Skill development request:', data);
    const result = {
      id: Date.now().toString(),
      type: 'skill_development',
      title: `Skill Development: ${data.skillName || 'Professional Skills'}`,
      description: `Personalized learning path for ${data.skillName || 'skill development'}`,
      subject: data.skillName || 'Professional Development',
      targetAudience: `${data.currentLevel || 'Beginner'} to ${data.targetLevel || 'Advanced'} learners`,
      modules: [
        'Foundation and Assessment',
        'Core Skill Building',
        'Advanced Techniques',
        'Real-world Application',
        'Mastery and Certification'
      ],
      objectives: [
        `Progress from ${data.currentLevel || 'current'} to ${data.targetLevel || 'target'} level`,
        'Build practical competency',
        'Apply skills in real scenarios',
        'Achieve measurable improvement'
      ],
      activities: [
        'Skill assessment and benchmarking',
        'Structured practice sessions',
        'Mentorship and feedback',
        'Project-based learning'
      ],
      assessments: [
        'Initial skill assessment',
        'Progress checkpoints',
        'Practical demonstrations',
        'Final competency evaluation'
      ],
      resources: [
        'Learning materials and guides',
        'Practice environments',
        'Expert mentorship',
        'Community support groups'
      ],
      timeline: data.timeframe || '3-6 months',
      difficulty: data.targetLevel || 'Intermediate',
      recommendations: [
        'Set clear milestones',
        'Practice consistently',
        'Seek feedback regularly',
        'Track progress systematically'
      ],
      generatedAt: new Date().toISOString()
    };
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Failed to generate skill development plan' });
  }
});

app.post('/api/education/research-insights', (req, res) => {
  try {
    const data = req.body;
    console.log('🔬 Research insights request:', data);
    const result = {
      id: Date.now().toString(),
      type: 'research_insights',
      title: `Research: ${data.researchTopic || 'Academic Research'}`,
      description: `Data analysis framework for ${data.researchTopic || 'research project'}`,
      subject: data.researchTopic || 'Research Methodology',
      targetAudience: data.stakeholders || 'Research team',
      modules: [
        'Research Design and Planning',
        'Data Collection Methods',
        'Analysis and Processing',
        'Interpretation and Insights',
        'Reporting and Presentation'
      ],
      objectives: data.analysisGoals ? data.analysisGoals : [
        'Collect reliable data',
        'Analyze patterns and trends',
        'Generate actionable insights',
        'Present findings effectively'
      ],
      activities: [
        'Literature review and planning',
        'Data collection and validation',
        'Statistical analysis',
        'Insight generation and validation'
      ],
      assessments: [
        'Research proposal review',
        'Data quality assessment',
        'Analysis methodology evaluation',
        'Final report and presentation'
      ],
      resources: [
        'Research databases and tools',
        'Statistical software packages',
        'Expert consultation',
        'Academic literature access'
      ],
      timeline: data.timeline || '2-3 months',
      difficulty: 'Advanced',
      recommendations: [
        'Define clear research questions',
        'Use appropriate methodologies',
        'Validate findings thoroughly',
        'Present results clearly'
      ],
      generatedAt: new Date().toISOString()
    };
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Failed to generate research insights' });
  }
});
  }
});

app.post('/api/education/skill-development', (req, res) => {
  try {
    const data = req.body;
    console.log('🎯 Skill development request:', data);
    const result = {
      id: Date.now().toString(),
      title: `Skill Development: ${data.skillArea || 'Professional Skills'}`,
      prompt: `Develop a plan for learning ${data.skillArea} at ${data.currentLevel} level`,
      generatedAt: new Date().toISOString()
    };
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Failed to generate skill development plan' });
  }
});

app.post('/api/education/research-insights', (req, res) => {
  try {
    const data = req.body;
    console.log('🔬 Research insights request:', data);
    const result = {
      id: Date.now().toString(),
      title: `Research: ${data.researchTopic || 'Academic Research'}`,
      prompt: `Conduct research on ${data.researchTopic} focusing on ${data.researchScope}`,
      generatedAt: new Date().toISOString()
    };
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Failed to generate research insights' });
  }
// *** EDUCATION ENDPOINTS ***

app.post('/api/education/skill-development', (req, res) => {
  try {
    const data = req.body;
    console.log('🎯 Skill development request:', data);
    const result = {
      id: Date.now().toString(),
      type: 'skill_development',
      title: `Skill Development: ${data.skillName || 'Professional Skills'}`,
      description: `Personalized learning path for ${data.skillName || 'skill development'}`,
      subject: data.skillName || 'Professional Development',
      targetAudience: `${data.currentLevel || 'Beginner'} to ${data.targetLevel || 'Advanced'} learners`,
      modules: [
        'Foundation and Assessment',
        'Core Skill Building',
        'Advanced Techniques',
        'Real-world Application',
        'Mastery and Certification'
      ],
      objectives: [
        `Progress from ${data.currentLevel || 'current'} to ${data.targetLevel || 'target'} level`,
        'Build practical competency',
        'Apply skills in real scenarios',
        'Achieve measurable improvement'
      ],
      activities: [
        'Skill assessment and benchmarking',
        'Structured practice sessions',
        'Mentorship and feedback',
        'Project-based learning'
      ],
      assessments: [
        'Initial skill assessment',
        'Progress checkpoints',
        'Practical demonstrations',
        'Final competency evaluation'
      ],
      resources: [
        'Learning materials and guides',
        'Practice environments',
        'Expert mentorship',
        'Community support groups'
      ],
      timeline: data.timeframe || '3-6 months',
      difficulty: data.targetLevel || 'Intermediate',
      recommendations: [
        'Set clear milestones',
        'Practice consistently',
        'Seek feedback regularly',
        'Track progress systematically'
      ],
      generatedAt: new Date().toISOString()
    };
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Failed to generate skill development plan' });
  }
});

app.post('/api/education/research-insights', (req, res) => {
  try {
    const data = req.body;
    console.log('🔬 Research insights request:', data);
    const result = {
      id: Date.now().toString(),
      type: 'research_insights',
      title: `Research: ${data.researchTopic || 'Academic Research'}`,
      description: `Data analysis framework for ${data.researchTopic || 'research project'}`,
      subject: data.researchTopic || 'Research Methodology',
      targetAudience: data.stakeholders || 'Research team',
      modules: [
        'Research Design and Planning',
        'Data Collection Methods',
        'Analysis and Processing',
        'Interpretation and Insights',
        'Reporting and Presentation'
      ],
      objectives: data.analysisGoals ? data.analysisGoals : [
        'Collect reliable data',
        'Analyze patterns and trends',
        'Generate actionable insights',
        'Present findings effectively'
      ],
      activities: [
        'Literature review and planning',
        'Data collection and validation',
        'Statistical analysis',
        'Insight generation and validation'
      ],
      assessments: [
        'Research proposal review',
        'Data quality assessment',
        'Analysis methodology evaluation',
        'Final report and presentation'
      ],
      resources: [
        'Research databases and tools',
        'Statistical software packages',
        'Expert consultation',
        'Academic literature access'
      ],
      timeline: data.timeline || '2-3 months',
      difficulty: 'Advanced',
      recommendations: [
        'Define clear research questions',
        'Use appropriate methodologies',
        'Validate findings thoroughly',
        'Present results clearly'
      ],
      generatedAt: new Date().toISOString()
    };
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Failed to generate research insights' });
  }
});
});
async function startServer() {
  try {
    console.log('🔄 Connecting to database...');
    await ensureDatabaseSetup();
    console.log('✅ Database connected successfully at:', new Date().toISOString());
    console.log('📦 Database setup complete');
    
    app.listen(PORT, () => {
      console.log(`🚀 Server running on http://localhost:${PORT}`);
      console.log(`📡 API available at http://localhost:${PORT}/api`);
    });
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

process.on('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully...');
  await closeDatabaseConnection();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('SIGINT received, shutting down gracefully...');
  await closeDatabaseConnection();
  process.exit(0);
});

startServer();
import socialCampaignRoutes from './routes/marketing/socialCampaign';
app.use('/api/marketing', socialCampaignRoutes);
