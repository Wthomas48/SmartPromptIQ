generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      String   @default("USER")
  plan      String   @default("FREE")
  
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionStatus   String?
  subscriptionEndDate  DateTime?
  
  generationsUsed  Int @default(0)
  generationsLimit Int @default(10)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  teams       TeamMember[]
  projects    Project[]
  generations Generation[]
  analytics   Analytics[]
  templates   Template[]
  
  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  maxMembers  Int @default(5)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  members  TeamMember[]
  projects Project[]
  
  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   String   @default("MEMBER")
  
  joinedAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_members")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  status      String   @default("ACTIVE")
  
  settings String?
  metadata String?
  
  userId String
  teamId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team?        @relation(fields: [teamId], references: [id], onDelete: SetNull)
  generations Generation[]
  
  @@map("projects")
}

model Generation {
  id        String @id @default(cuid())
  projectId String
  userId    String
  
  prompt     String
  response   String
  model      String
  category   String
  tokenCount Int?
  cost       Float?
  quality    Int?
  metadata   String?
  
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("generations")
}

model Template {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  category    String
  prompt      String
  isPublic    Boolean @default(false)
  
  usageCount Int @default(0)
  rating     Float?
  
  userId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("templates")
}

model Analytics {
  id     String   @id @default(cuid())
  userId String
  
  event    String
  category String
  value    Float?
  metadata String?
  
  timestamp DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("analytics")
}
