import { useEffect, useState } from "react";
import { useRoute, useLocation } from "wouter";
import Navigation from "@/components/Navigation";
import BackButton from "@/components/BackButton";
import QuestionCard from "@/components/QuestionCard";
import { Button } from "@/components/ui/button";
import { ArrowLeft, ArrowRight } from "lucide-react";

interface Question {
  id: string;
  title: string;
  description: string;
  options: Array<{
    value: string;
    label: string;
    description: string;
  }>;
}

// Remove the fetch call from here - it should be inside a function or useEffect

const questionsByCategory: Record<string, Question[]> = {
  "business-strategy": [
    {
      id: "q1",
      title: "What's your primary business objective?",
      // ... rest of your questions
    }
  ]
  // ... rest of your categories
};

const Questionnaire = () => {
  const [, params] = useRoute("/questionnaire/:category");
  const [location, setLocation] = useLocation();
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<string, string>>({});
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // Check authentication on component mount
  useEffect(() => {
    const checkAuth = () => {
      const token = localStorage.getItem('token');
      
      if (!token) {
        // Redirect to login if no token
        console.log('No token found, redirecting to login...');
        setLocation('/login');
        return;
      }
      
      setIsAuthenticated(true);
      setIsLoading(false);
    };

    checkAuth();
  }, [setLocation]);

  // Function to handle API calls with authentication
  const generateContent = async (prompt: string, category: string) => {
    const token = localStorage.getItem('token');
    
    if (!token) {
      console.error('No authentication token found');
      setLocation('/login');
      return;
    }

    try {
      const response = await fetch('http://localhost:3001/api/generations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify({
          projectId: "demo",
          prompt: prompt,
          model: "gpt-4",
          category: category
        })
      });

      if (response.status === 401) {
        // Token expired or invalid
        localStorage.removeItem('token');
        setLocation('/login');
        return;
      }

      const data = await response.json();
      console.log("Generated result:", data);
      return data;
    } catch (err) {
      console.error("Error generating:", err);
      throw err;
    }
  };

  // Show loading while checking auth
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  // This should not happen due to redirect, but just in case
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p>Please log in to continue</p>
          <Button onClick={() => setLocation('/login')} className="mt-4">
            Go to Login
          </Button>
        </div>
      </div>
    );
  }

  const category = params?.category || "business-strategy";
  const questions = questionsByCategory[category] || [];
  const currentQuestion = questions[currentQuestionIndex];

  const handleAnswer = (value: string) => {
    setAnswers({
      ...answers,
      [currentQuestion.id]: value,
    });
  };

  const handleNext = async () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      // All questions answered, generate content
      try {
        const prompt = `Generate content based on these answers: ${JSON.stringify(answers)}`;
        await generateContent(prompt, category);
        // Navigate to results or next step
        setLocation('/results');
      } catch (error) {
        console.error('Failed to generate content:', error);
      }
    }
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
  };

  // Rest of your component JSX...
  return (
    <div className="min-h-screen bg-background">
      <Navigation />
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <BackButton />
        
        <div className="mt-8">
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-2">
              {category.split('-').map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
              ).join(' ')} Questionnaire
            </h1>
            <p className="text-muted-foreground">
              Question {currentQuestionIndex + 1} of {questions.length}
            </p>
          </div>

          {currentQuestion && (
            <>
              <QuestionCard
                question={currentQuestion}
                selectedValue={answers[currentQuestion.id]}
                onSelect={handleAnswer}
              />

              <div className="flex justify-between mt-8">
                <Button
                  variant="outline"
                  onClick={handlePrevious}
                  disabled={currentQuestionIndex === 0}
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Previous
                </Button>
                
                <Button
                  onClick={handleNext}
                  disabled={!answers[currentQuestion.id]}
                >
                  {currentQuestionIndex === questions.length - 1 ? 'Generate' : 'Next'}
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Questionnaire;